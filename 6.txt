Diseño de Interfaz Gráfica
--------------------------

    ¿Cómo se hace una estatua de un elefante? Empezás con un bloque de mármol
    y sacás todo lo que no parece un elefante.

    -- Anónimo.

¿Siendo un programador, qué sabe uno de diseños de interfaces? La respuesta,
al menos en mi caso es poco y nada. Sin embargo, hay unos cuantos principios
que ayudan a que uno no cree interfaces *demasiado* horribles, o a veces hasta agradables.

* Aprender de otros.

  Estamos rodeados de ejemplos de buenas y malas interfaces. Copiar es bueno.

* Contenerse.

  Tenemos una tendencia natural a crear cabinas de Concord. No te digo que no
  está buena la cabina de un Concord, lo que te digo es que para hacer tostadas
  es demasiado.


  .. figure:: concord.jpg
     :width: 80%

     Concord cockpit by wynner3, licencia CC-BY-NC (http://www.flickr.com/photos/wynner3/3805698150/)

  En general, dado que uno no tiene la habilidad (en principio) de crear
  asombrosas interfaces, lo mejor es crear lo menos posible. ¡Lo que no está
  ahí no puede estar *tan* mal!

* Pensar mucho *antes*.

  Siempre es más fácil agregar y mantener un feature bien pensado, con una
  interfaz limitada, que tratar de hacer que funcione una pila de cosas a medio
  definir.

  Si no sabés *exactamente* cómo funciona tu aplicación, no estás listo para
  hacer una interfaz usable para ella. Sí podés hacer una de prueba.

* Tirá una.

  Hacé una interfaz mientras estás empezando. Después tirála. Si hiciste una
  clara separación de capas eso debería ser posible.

* Pedí ayuda.

  Si tenés la posibilidad de que te de una mano un experto en usabilidad, usála.
  Sí, ya sé que vos podés crear una interfaz que funcione, eso es lo *fácil*, lo
  difícil es crear una interfaz que alguien quiera usar.

Más allá de esos criterios, en este capítulo vamos a tomar la interfaz creada en el
capítulo anterior y la vamos a rehacer, pero bien. Porque esa era la de
desarrollo, y la vamos a tirar.

Proyecto
--------

Asumamos que la aplicación de streaming de radio que desarrollamos en el
capítulo anterior funciona correctamente y carece de bugs [#]_...
¿Qué hay que hacer ahora?

.. [#] No es así, pero estoy escuchando música con ella ¡En este mismo
       momento!

Bueno, falta resolver todas las cosas que **no** son bugs desde el punto de
vista de funcionamiento pero que están mal.

Diseño de la Interfaz Gráfica
-----------------------------

Empecemos con la ventana de configuración, viendo algunos problemas
de base en el diseño. Desde ya que el 90% de lo que veamos ahora es
discutible. Es más, como no soy un experto en el tema, es probable
que el 90% esté **equivocado**. Sin embargo, hasta que consiga un
experto en UI que le pegue una revisada... es lo que hay.

.. figure:: radio-14.print.jpg
   :width: 40%

   Funciona, pero tiene problemas.

Esa ventana tiene *muchos* problemas.

.. figure:: radio-15.print.jpg
   :width: 40%

   Botón "Close" no alineado.

Normalmente no vas a ver este caso cubierto en las guías de diseño de
interfaz porque estamos usando un layout "columna de botones" que no
es de lo más standard.

Si hubiera más de un botón abajo, entonces tal vez "Close" se vería
como perteneciente a ese elemento visual, sin embargo, al estar solo,
se lo ve como un elemento de la columna, aunque "destacado" por la
separación vertical.

Al ser "absorbido" visualmente por esa columna, queda muy raro que
no tenga el mismo ancho que los otros botones.

Como no debemos asignar anchos fijos a los botones (por motivos que
vamos a ver más adelante) debemos solucionarlo usando layout
managers.

Una manera de resolverlo es una matriz 2x2 con un grid layout:

.. figure:: radio-18.print.jpg
   :width: 40%

   Botón "Close" alineado.

El resultado final es bastante más armónico, y divide visualmente
el diálogo en dos componentes claros, la lista a la izquierda, los
controles a la derecha.

Lo que nos lleva al segundo problema:

.. figure:: radio-17.print.jpg
   :width: 40%

   Espacio muerto.

Si el layout es "dos columnas" entonces no tiene sentido que la lista
termine antes del fondo del diálogo. Nuevamente, si hubiera dos
botones abajo (por ejemplo, "Accept" y "Reject"), entonces sí tendría
sentido extender ese componente visual hacia la izquierda.

Al tener sólo uno, ese espacio vacío es innecesario y antifuncional.

Entonces cambiamos el esquema de layouts, y terminamos con un layout
horizontal de dos elementos, el derecho un layout vertical conteniendo
todos los botones:

.. figure:: radio-19.print.jpg
   :width: 40%

   Resultado con layout horizontal.


.. figure:: radio-16.print.jpg
   :width: 40%

   Etiquetas centradas con iconos a la izquierda.

