La GUI es la Parte Fácil
------------------------


Empezar a crear la interfaz gráfica de una aplicación es como empezar a escribir
un libro. Tenés un espacio en blanco, esperando que hagas algo, y si no sabés
qué es lo que querés poner ahí, la infinitud de los caminos que se te abren
es paralizante.

Este capítulo no te va a ayudar en absoluto con ese problema, si no que vamos
a tratar de resolver su opuesto: sabiendo qué querés hacer, cómo se hace?

Vamos a aprender a hacer programas sencillos usando PyQt, un toolkit de
interfaz gráfica potente, multiplataforma, y relativamente sencillo de usar.

Proyecto
~~~~~~~~

Vamos a hacer una aplicación completa. Como esto es un libro de Python y no
específicamente de PyQt, no va a ser *tan* complicada. Veamos un escenario para
entender de dónde viene este proyecto.

Supongamos que estás usando tu computadora y querés escuchar música. Supongamos
también que te gusta escuchar radios online.

Hoy en día hay varias maneras de hacerlo:

* Ir al sitio de la radio.
* Utilizar un reproductor de medios (Amarok, Banshee, Media Player o similar)
* Usar `RadioTray <http://radiotray.sf.net>`_

Resulta que mi favorita es la tercera opción, y nuestro proyecto es
crear una aplicación similar, minimalista y fácil de entender.

En nuestro caso, como nos estamos basando (en principio) en clonar otra
aplicación [#]_ no hace falta pensar demasiado el diseño de la interfaz
o el uso de la misma.

.. [#] Actividad con la que no estoy demasiado contento en general, pero
       bueno, es con fines educativos. (¡me encanta esa excusa!)

Sin embargo, en el capítulo siguiente vamos a darle una buena repasada a
lo que creamos en este, y vamos a pulir todos los detalles. No es
demasiado grave si empezamos con una versión un poco rústica.

Programación con Eventos
~~~~~~~~~~~~~~~~~~~~~~~~

La función principal que se ejecuta en cualquier aplicación gráfica,
en particular en una en PyQt, es sorprendentemente corta, y es igual
en el 90% de las aplicaciones:

.. class:: titulo-listado

radio1.py

.. class:: listado

.. code-block:: python
   :linenos:
   :linenos_offset:
   :include: codigo/5/radio1.py
   :start-at: def main

Esto es porque no hace gran cosa:

1. Crea un objeto "aplicación".
2. Crea y muestra una ventana.
3. Lanza el "event loop", y cuando este termina, muere.

Eso es así porque las aplicaciones de escritorio no hacen casi nada
por su cuenta, son *reactivas*, reaccionan a eventos que suceden.

Estos eventos pueden ser iniciados por el usuario (click en un botón)
o por el sistema (se enchufó una cámara), u otra cosa (un timer que
se dispara periódicamente), pero el estado natural de la aplicación
es estar en el event loop, esperando, justamente, un evento.

Entonces nuestro trabajo es crear todas las cosas que se necesiten
en la aplicación -- ventanas, diálogos, etc -- esperar que se
produzcan los eventos y escribir el código que responda a los mismos.

En PyQt, casi siempre esos eventos los vamos a manejar mediante
Signals (señales) y Slots.

¿Qué son esas cosas? Bueno, son un mecanismo de manejo de eventos ;-)

En particular, una señal es un mensaje. Y un slot es un receptor de
esos mensajes. Por ejemplo, cuando el usuario aprieta un botón, el
objeto ``QPushButton`` correspondiente *emite* la señal ``clicked()``.

¿Y qué sucede? Absolutamente nada, porque las señales no tienen
efectos. Es como si el botón se pusiera a gritar "me apretaron". Eso
en sí no hace nada.

Pero imaginemos que hay **otro** objeto que está escuchando y tiene
instrucciones de que si ese botón específico dice "me apretaron", 
debe cerrar la ventana. Bueno, cerrar la ventana es un slot, y
el ejemplo es una conexión a un slot.

La conexión *observa* esperando una señal [#]_, y cuando la señal se
produce, ejecuta una función común y corriente, que es el slot.

.. [#] Hay un "despachador de señales" que se encarga de ejecutar cada
       slot cuando se emiten las señales conectadas a él.

Pero lo más lindo de señales y slots es que tiene acoplamiento débil
(es "loosely coupled"). Cada señal de cada objeto puede estar
conectada a ninguno, a uno, o a muchos slots. Cada slot puede tener
conectadas ninguna, una o muchas señales.

Hasta es posible "encadenar" señales: si uno conecta una señal a otra,
al emitirse una se emita la otra.

Es más, en principio, ni al emisor de la señal ni al receptor de la
misma les importa quién es el otro.

La sintaxis de conexión que vamos a usar es la nueva, que sólo está
disponible en PyQt 4.7 o superior, porque es mucho más agradable que
la otra.

Por ejemplo, si ``cerrar`` es un ``QPushButton`` (o sea, un botón
común y corriente), y ``ventana`` es un ``QDialog`` ( o sea, una
ventana de diálogo), se pueden conectar así:

.. code-block:: python

   cerrar.clicked.connect(ventana.accept)

Eso significaría "cuando se emita la señal ``clicked`` del botón ``cerrar``,
entonces ejecutá el método ``accept`` de ``ventana``." Como el método
``QDialog.accept`` cierra la ventana, la ventana se cierra.

Ventanas / Diálogos
~~~~~~~~~~~~~~~~~~~

Empecemos con la parte divertida: ¡dibujitos!

Radiotray tiene exactamente dos ventanas [#]_:

.. figure:: radio-1.print.jpg
   :width: 63%

   El diálogo de administración de radios y el de añadir radio.

.. [#] Bueno, mentira, tiene también  una ventana "Acerca de".

No creo en hacer ventanas a mano. Creo que acomodar los widgets en el
lugar adonde van es un problema resuelto, y la solución es usar un
diseñador de diálogos. [#]_

.. [#] Sí, ya sé, "no tenés el mismo control". Tampoco tengo mucho
       control sobre la creación de la pizzanesa a la española en La
       Farola de San Isidro, pero si alguna vez la comiste sabés que
       eso es lo de menos.

En nuestro caso, como estamos usando PyQt, la herramienta es Qt
Designer [#]_.

.. [#] Lamentablemente una *buena* explicación de Designer requiere
       videos y mucho más detalle del que puedo incluir en un
       capítulo, pero vamos a tratar de ver lo importante, sin
       quedarnos en cómo se hace cada cosa exactamente.

.. figure:: radio-2.print.jpg
   :width: 100%

   Designer a punto de crear un diálogo vacío.

El proceso de crear una interfaz en Designer tiene varios pasos.
Sabiendo qué interfaz queremos [#]_, el primero es acomodar más o menos
a ojo los objetos deseados.

.. [#] En nuestro caso, como estamos robando, es muy sencillo. En la
       vida real, este trabajo se basaría en wireframing, o algún
       otro proceso de creación de interfaces.

.. figure:: radio-3.print.jpg
   :width: 40%

   El primer borrador.

   Literalmente, tomé unos botones y una lista y los tiré adentro de la
   ventana más o menos en posición.

El acomodarlos muy así nomás es intencional, porque el siguiente paso
es usar *Layout Managers* para que los objetos queden bien acomodados.
En una GUI moderna **no tiene sentido** acomodar las cosas en posiciones
absolutas, porque no tenés idea de como va a ser la interfaz para el
usuario final con tanto nivel de detalle. Por ejemplo:

* Traducciones a otros idiomas hacen que los botones deban ser más
  anchos o angostos.

* Cambios en la tipografía del sistema pueden hacer que sean más altos
  o bajos.

* Cambios en el estilo de widgets, o en la plataforma usada pueden
  cambiar la forma misma de un botón (¿más redondeado? ¿más plano?)

Dadas todas esas variables, es nuestro trabajo hacer un layout que
funcione con todas las combinaciones posibles, que sea flexible y
responda a esos cambios con gracia.

En nuestro caso, podríamos imponer las siguientes "restricciones" a
las posiciones de los widgets:

* El botón de "Cerrar" va abajo a la derecha.

* Los otros botones van en una columna a la derecha de la lista,
  en la parte de arriba de la ventana.

* La lista va a la izquierda de los botones.

Veamos por partes.

Los botones se agrupan con un "Vertical Layout", para que queden
alineados y en columna. Los seleccionamos todos usando Ctrl+click y
apretamos el botón de "vertical layout" en la barra de herramientas:

.. figure:: radio-4.print.jpg
   :width: 40%

   El layout vertical de botones se ve como un recuadro rojo.

Un layout vertical solo hace que los objetos que contiene queden en
una columna. Todos tienen el mismo ancho y están espaciados
regularmente.

Para que los botones queden al lado de la lista, seleccionamos *el layout*
y la lista, y hacemos un layout horizontal:

.. figure:: radio-5.print.jpg
   :width: 40%

   ¡Layouts anidados!

El layout horizontal hace exactamente lo mismo que el vertical, pero
en vez de una columna forman una fila.

Por último, deberíamos hacer un layout vertical conteniendo el layout
horizontal que acabamos de crear y el botón que nos queda.

Como ese layout es el "top level" y tiene que cubrir toda la ventana,
se hace ligeramente distinto: botón derecho en el fondo de la ventana
y "Lay out" -> "Lay Out Vertically":

.. figure:: radio-6.print.jpg
   :width: 40%

   ¡Feo!

Si bien el resultado cumple las cosas que habíamos definido, es
horrible:

* El botón de cerrar cubre todo el fondo de la ventana.
* El espaciado de los otros botones es antinatural.

La solución en ambos casos es el uso de espaciadores, que "empujen"
el botón de abajo hacia la derecha (luego de meterlo en un layout
horizontal) y los otros hacia arriba:

.. figure:: radio-7.print.jpg
   :width: 40%

   ¡Mejor!
    
Por supuesto que hay más de una solución para cada problema de cómo
acomodar widgets:

.. figure:: radio-8.print.jpg
   :width: 40%

   ¿Mejor o peor que la anterior? ¡Vean el capítulo siguiente!

El siguiente paso es poner textos [#]_, iconos [#]_, y nombres de objetos
para que la interfaz empiece a parecer algo útil.

.. [#] Sí, estoy haciendo la interfaz en inglés. Después vamos a ver
       como traducirla al castellano. Si la hacés directamente en
       castellano te estás encerrando en un nicho (por lo menos si
       la aplicación es software libre, como esta).

.. [#] Yo uso los `iconos de Reinhardt <http://kde-look.org/content/show.php?content=6153>`_:
       me gustan estéticamente, son minimalistas y se ven igual de
       raros en todos los sistemas operativos. Si querés usar otros,
       hay millones de iconos gratis dando vueltas. Es cuestión de
       ser consistente (¡y fijarse la licencia!)

Los iconos se van a cargar en un *archivo de recursos*, ``icons.qrc``:

.. code-block:: xml
   :include: codigo/5/icons.qrc

Ese archivo se compila para generar un módulo python con todas las
imágenes en su interior. Eso simplifica el deployment.

::

    [codigo/5]$ pyrcc4 icons.qrc -o icons_rc.py
    [codigo/5]$ ls -lth icons_rc.py
    -rw-r--r-- 1 ralsina users 58K Apr 30 10:14 icons_rc.py

El diálogo en sí está definido en el archivo ``radio.ui``, y se ve de
esta manera:

.. figure:: radio-9.print.jpg
   :width: 40%

   Nuestro clon.

El otro diálogo es mucho más simple, y no voy a mostrar el proceso de
layout, pero tiene un par de peculiaridades.

Buddies
    Cuando se tiene una pareja etiqueta/entrada (por ejemplo,
    "Radio Name:" y el widget donde se ingresa), hay que poner
    el atajo de teclado en la etiqueta. Para eso se usan "buddies".

    Se elije el modo "Edit Buddies" del designer y se marca la
    etiqueta y luego el widget de ingreso de datos. De esa forma,
    el atajo de teclado elegido para la etiqueta activa el
    widget.

.. figure:: radio-10.print.jpg
   :width: 45%

Tab Order
    ¿En qué orden se pasa de un widget a otro usando Tab? Es
    importante que se siga un orden lógico acorde a lo que se ve
    en pantalla y no andar saltando de un lado para otro sin
    una lógica visible.

    Se hace en el modo "Edit Tab Order" de designer.

.. figure:: radio-11.print.jpg
   :width: 45%

Signals/Slots
    Los diálogos tienen métodos ``accept`` y ``reject`` que coinciden
    con el objetivo obvio de los botones. ¡Entonces conectémoslos!

    En el modo "Edit Signals/Slots" de designer, se hace click en
    el botón y luego en el diálogo en sí, y se elige qué se conecta.

.. figure:: radio-12.print.jpg
   :width: 45%

Pasemos a una comparativa lado a lado de los objetos
terminados:

.. figure:: radio-13.print.jpg
   :width: 90% 

   Son similares. ¡Hasta tienen algunos problemas similares!

Mostrando una Ventana
~~~~~~~~~~~~~~~~~~~~~

Ya tenemos dos bonitas ventanas creadas, necesitamos hacer que
la aplicación muestre una de ellas. Esto es código standard, y aquí
tenemos una aplicación completa que muestra la ventana y no hace
absolutamente nada:


.. class:: titulo-listado

radio1.py

.. class:: listado

.. code-block:: python
   :linenos:
   :linenos_offset:
   :include: codigo/5/radio1.py


Acciones
~~~~~~~~

